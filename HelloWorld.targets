<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask
      TaskName="HelloWorld"
      TaskFactory="CodeTaskFactory"
      AssemblyFile="C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.Build.Tasks.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup >
      <MSBuildProjectDirectory ParameterType="System.String" Required="true" Output="false"></MSBuildProjectDirectory>
    </ParameterGroup >

    <Task>
      <Reference Include="System.Xml.Linq"/>
      <Reference Include="System.Xml"/>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text.RegularExpressions"/>
      <Using Namespace="System.Xml.Linq"/>
      <Using Namespace="System.Linq"/>
      <Code Type="Method" Language="cs">
        <![CDATA[
         public override bool Execute()
        {
            var xNamespace = XNamespace.Get("http://schemas.microsoft.com/developer/msbuild/2003");
            var files = Directory.GetFiles(this.MSBuildProjectDirectory, "*.csproj", SearchOption.AllDirectories);
            foreach (var file in files) {
                var directoryName = Path.GetDirectoryName(file) + "";
                var document = XDocument(directoryName, file);
                
                CreateAttributes(document, xNamespace, directoryName, this.MSBuildProjectDirectory);
                document.Save(file,SaveOptions.None);
            }
            return true;
        }
      static void CreateAttributes(XDocument document, XNamespace xNamespace, string directoryName, string MSBuildProjectDirectory) {
            var references = document.Descendants().Where(element => element.Name.LocalName == "Reference" && element.Attribute("Include").Value.StartsWith("Xpand."));                
            foreach (XElement reference in references) {
                var attribute = reference.Attribute("Include");
                attribute.Value =
                    Regex.Match(attribute.Value, "Xpand.[^,]*", RegexOptions.Singleline | RegexOptions.IgnoreCase).Value;
                reference.RemoveNodes();
                CreateAttributes(reference, xNamespace, attribute.Value, directoryName, MSBuildProjectDirectory);
            }
        }

        static void CreateAttributes(XElement reference, XNamespace xNamespace, string assemblyName, string directoryName,
                                     string MSBuildProjectDirectory) {
            
            reference.Add(new XElement(xNamespace + "SpecificVersion"){Value = "False"});
            reference.Add(new XElement(xNamespace + "Private"){Value = assemblyName.Contains("BaseImpl") ? "True" : "False"});

            reference.Add(new XElement(xNamespace + "HintPath"){
                Value = CalcPathToXpandDll(directoryName, MSBuildProjectDirectory) + assemblyName + ".dll"
            });
        }
        static string CalcPathToXpandDll(string project, string msBuildProjectDirectory) {
            string path = null;
            while (project!=msBuildProjectDirectory) {
                path += @"..\";
                project = project.Substring(0, project.LastIndexOf(@"\", StringComparison.Ordinal));
            }
            return path + @"Xpand.DLL\";
        }
        static XDocument XDocument(string directoryName, string file) {
            Environment.CurrentDirectory = directoryName;
            XDocument document;
            using (var fileStream = File.OpenRead(file)) {
                document = System.Xml.Linq.XDocument.Load(fileStream);
            }
            return document;
        }

        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>