<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask
      TaskName="FixReferences"
      TaskFactory="CodeTaskFactory"
      AssemblyFile="C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.Build.Tasks.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup >
      <MSBuildProjectDirectory ParameterType="System.String" Required="true" Output="false"></MSBuildProjectDirectory>
      <ProjectFiles ParameterType="System.String" Required="true" Output="false"></ProjectFiles>
      <Token ParameterType="System.String" Required="true" Output="false"></Token>
    </ParameterGroup >

    <Task>
      <Reference Include="System.Xml.Linq"/>
      <Reference Include="System.Xml"/>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text.RegularExpressions"/>
      <Using Namespace="System.Xml.Linq"/>
      <Using Namespace="System.Linq"/>
      <Using Namespace="System.Diagnostics"/>
      <Code Type="Method" Language="cs">
        <![CDATA[
         public override bool Execute()
        {
            var version=GetVersion();
            Console.WriteLine(version);
            var xNamespace = XNamespace.Get("http://schemas.microsoft.com/developer/msbuild/2003");
            var files = Directory.GetFiles(this.MSBuildProjectDirectory, "*.csproj", SearchOption.AllDirectories);
            foreach (var file in files) {
                var directoryName = Path.GetDirectoryName(file) + "";
                var document = GetXDocument(file);
                CreateAttributes(document, xNamespace, directoryName, this.MSBuildProjectDirectory,version);
                document.Save(file,SaveOptions.None);
                var configFile=GetConfigFile(file);
                if (configFile!=null)
                  UpdateConfig(configFile,version);
            }
            return true;
        }
        
        public void UpdateConfig(string file, string version) {
            XDocument xDocument = GetXDocument(file);
            XNamespace xNamespace = "urn:schemas-microsoft-com:asm.v1";
            XElement runtimeElement = xDocument.Descendants().FirstOrDefault(element => element.Name == "runtime");
            if (runtimeElement != null){
                runtimeElement.Remove();
                xDocument.Save(file, SaveOptions.None);
            }
            return;
            runtimeElement = new XElement("runtime");
            xDocument.Root.Add(runtimeElement);
            var assemblyBindingElement = new XElement(xNamespace+"assemblyBinding");
            runtimeElement.Add(assemblyBindingElement);

            foreach (string projectFile in ProjectFiles.Split(';').Where(s => !string.IsNullOrEmpty(s))) {
                var dependentAssemblyElement = new XElement(xNamespace+"dependentAssembly");
                assemblyBindingElement.Add(dependentAssemblyElement);
                var assemblyIdentityElement = new XElement(xNamespace + "assemblyIdentity");
                dependentAssemblyElement.Add(assemblyIdentityElement);
                string assemblyName = Path.GetFileNameWithoutExtension(projectFile.Trim()) ;
                assemblyIdentityElement.Add(new XAttribute("name", assemblyName));
                assemblyIdentityElement.Add(new XAttribute("publicKeyToken", Token));
                assemblyIdentityElement.Add(new XAttribute("culture", "neutral"));
                var codeBaseElement = new XElement(xNamespace + "codeBase");
                dependentAssemblyElement.Add(codeBaseElement);
                codeBaseElement.Add(new XAttribute("version", version));

                string path = Path.Combine(MSBuildProjectDirectory, "Xpand.Dll/" + assemblyName+".dll");
                codeBaseElement.Add(new XAttribute("href", "file://" + path));
            }

            xDocument.Save(file, SaveOptions.None);
            
        }

       void CreateAttributes(XDocument document, XNamespace xNamespace, string directoryName, string MSBuildProjectDirectory,string version) {
            var references = document.Descendants().Where(element => element.Name.LocalName == "Reference"&&Regex.IsMatch(element.Attribute("Include").Value, "(Xpand)|(DevExpress)", RegexOptions.Singleline | RegexOptions.IgnoreCase));                
            foreach (XElement reference in references) {
                var attribute = reference.Attribute("Include");
                attribute.Value =
                    Regex.Match(attribute.Value, "(Xpand.[^,]*)|(DevExpress.[^,]*)", RegexOptions.Singleline | RegexOptions.IgnoreCase).Value;
                reference.RemoveNodes();
                CreateAttributes(reference, xNamespace, attribute.Value, directoryName, MSBuildProjectDirectory);
            }
        }
        
        string GetConfigFile(string file) {
            var directoryName = Path.GetDirectoryName(file);
            var configFile = Path.Combine(directoryName, "app.config");
            if (File.Exists(configFile))
                return configFile;
            configFile = Path.Combine(directoryName, "web.config");
            return File.Exists(configFile) ? configFile : null;
        }

        void CreateAttributes(XElement reference, XNamespace xNamespace, string assemblyName, string directoryName,
                                     string MSBuildProjectDirectory) {
            
            reference.Add(new XElement(xNamespace + "SpecificVersion"){Value = "False"});
            if (assemblyName.Contains("BaseImpl")||assemblyName.Contains("FilterDataStore")||||assemblyName.Contains("ModelAdaptor"))
                reference.Add(new XElement(xNamespace + "Private"){Value = "True"});
                
            if (reference.Attribute("Include").Value.StartsWith("Xpand.")){
                reference.Add(new XElement(xNamespace + "HintPath"){
                    Value = CalcPathToXpandDll(directoryName, MSBuildProjectDirectory) + assemblyName + ".dll"
                });
            }
        }
        
        string CalcPathToXpandDll(string project, string msBuildProjectDirectory) {
            string path = null;
            while (project!=msBuildProjectDirectory) {
                path += @"..\";
                project = project.Substring(0, project.LastIndexOf(@"\", StringComparison.Ordinal));
            }
            return path + @"Xpand.DLL\";
        }
        XDocument GetXDocument(string file) {
            Environment.CurrentDirectory = Path.GetDirectoryName(file);
            XDocument document;
            using (var fileStream = File.OpenRead(file)) {
                document = System.Xml.Linq.XDocument.Load(fileStream);
            }
            return document;
        }
        
        string GetVersion() {
	        using (var fileStream = File.OpenRead(Path.Combine(this.MSBuildProjectDirectory,@"Xpand\Xpand.Utils\Properties\AssemblyInfo.cs"))) {
	            using (var streamReader = new StreamReader(fileStream)) {
	                return Regex.Match(streamReader.ReadToEnd(), "Version = \"(?<version>[^\"]*)", RegexOptions.Singleline | RegexOptions.IgnoreCase)
	                            .Groups["version"].Value;
	            }
	        }
  	    }

        


        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>