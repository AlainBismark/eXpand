using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Model.Core;
using eXpand.ExpressApp.Core.DynamicModel;
using DevExpress.ExpressApp.Model;
using eXpand.ExpressApp.ListEditors;

namespace eXpand.ExpressApp.SystemModule
{

    public interface IModelListViewMainViewOptionsBase:IModelNode
    {
        
    }
    public abstract class GridOptionsController<ControlType, GridViewOptionsInterfaceType> : ViewController, IModelExtender  {
        

        void IModelExtender.ExtendModelInterfaces(ModelInterfaceExtenders extenders) {
            Type type = GridViewOptionsModelSynchronizer.GetModelListViewMainViewOptionsType();
            extenders.Add(typeof(IModelListView), type);
            var modelApplicationCreatorProperties = ModuleBase.ModelApplicationCreatorProperties;
            ModelAutoGeneratedTypeCollector collector = modelApplicationCreatorProperties.AutoGeneratedTypeCollector;
            IEnumerable<DynamicModelType> dynamicModelTypes = GetDynamicModelTypes().ToList();
            foreach (var dynamicModelType in dynamicModelTypes) {
                collector.RegisterType(new ModelAutoGeneratedType(collector, dynamicModelType));
                extenders.Add(dynamicModelType.BaseType, dynamicModelType);
            }   
        }


        IEnumerable<DynamicModelType> GetDynamicModelTypes() {
            
            IEnumerable<PropertyInfo> propertyInfos = typeof(ControlType).GetProperties().Where(ControlPropertiesFilterPredicate());
            return from info in propertyInfos
                   let info2 = info
                   let firstOrDefault = typeof(GridViewOptionsInterfaceType).GetProperties().FirstOrDefault(info1 => info1.Name == info2.Name)
                   where firstOrDefault != null
                   select new DynamicModelType(firstOrDefault.PropertyType, info.PropertyType, null, DynamicPropertiesFilterPredicate());
        }

        protected abstract Func<PropertyInfo, bool> ControlPropertiesFilterPredicate();


        public abstract Func<PropertyInfo, bool> DynamicPropertiesFilterPredicate();

        


//        protected override void OnViewControlsCreated()
//        {
//            base.OnViewControlsCreated();
//            object control = GetControl();
//            if (control != null){
//                var gridViewOptionsModelSynchronizer = new GridViewOptionsModelSynchronizer(control, View.Model);
//                gridViewOptionsModelSynchronizer.ApplyModel();
//            }            
//        }

//        protected virtual object GetControl()
//        {
//            return View.Editor.Control;
//        }        
    }
}