using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Model.Core;
using eXpand.ExpressApp.Core.DynamicModel;
using DevExpress.ExpressApp.Model;

namespace eXpand.ExpressApp.SystemModule
{

    public abstract class OptionsController<ObjectType, OptionsInterfaceType,TExtendetBaseInterface> : ViewController, IModelExtender where TExtendetBaseInterface:IModelNode where OptionsInterfaceType:IModelNode{
        

        void IModelExtender.ExtendModelInterfaces(ModelInterfaceExtenders extenders) {
            extenders.Add(typeof(TExtendetBaseInterface), GetExtenderType());
            var modelApplicationCreatorProperties = ModuleBase.ModelApplicationCreatorProperties;
            ModelAutoGeneratedTypeCollector collector = modelApplicationCreatorProperties.AutoGeneratedTypeCollector;
            IEnumerable<DynamicModelType> dynamicModelTypes = GetDynamicModelTypes().ToList();
            foreach (var dynamicModelType in dynamicModelTypes) {
                collector.RegisterType(new ModelAutoGeneratedType(collector, dynamicModelType));
                extenders.Add(dynamicModelType.BaseType, dynamicModelType);
            }   
        }

        protected abstract Type GetExtenderType();


        IEnumerable<DynamicModelType> GetDynamicModelTypes() {
            
            IEnumerable<PropertyInfo> propertyInfos = typeof(ObjectType).GetProperties().Where(ControlPropertiesFilterPredicate());
            return from info in propertyInfos
                   let info2 = info
                   let firstOrDefault = typeof(OptionsInterfaceType).GetProperties().FirstOrDefault(info1 => info1.Name == info2.Name)
                   where firstOrDefault != null
                   select new DynamicModelType(firstOrDefault.PropertyType, info.PropertyType, null, DynamicPropertiesFilterPredicate(),GetDouplicatesTypeMapper());
        }

        protected virtual DynamicDouplicateTypesMapper GetDouplicatesTypeMapper() {
            return null;
        }

        protected abstract Func<PropertyInfo, bool> ControlPropertiesFilterPredicate();


        public abstract Func<PropertyInfo, bool> DynamicPropertiesFilterPredicate();

    }
}