<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="integrate" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DXVersion>13.2</DXVersion>
    <DXPath>C:\Program Files (x86)\DevExpress $(DXVersion)</DXPath>
    <DBUpdaterPath>$(DXPath)\Components\Tools\eXpressAppFramework\DBUpdater</DBUpdaterPath>
    <DBUpdaterName>DBUpdater.v$(DXVersion).exe</DBUpdaterName>
    <TestExecutorName>TestExecutor.v$(DXVersion).exe</TestExecutorName>
    <TestExecutorPath>$(DXPath)\Components\Tools\eXpressAppFramework\EasyTest\$(TestExecutorName)</TestExecutorPath>
    <EasyTestUserName>Admin</EasyTestUserName>
    <EasyTestUserPassword>AdminPass</EasyTestUserPassword>
    <ExtensionTasksPath Condition="'$(ExtensionTasksPath)' == ''">$(MSBuildProjectDirectory)\Resource\Build\ExtensionPack\</ExtensionTasksPath>
    <TypeMockLocation>Resource\TypeMock\</TypeMockLocation>
    <NuGetTool>Resource\Tool\NuGet.exe</NuGetTool>
    <TwitterTool>_third_party_assemblies\XTwitter.exe</TwitterTool>
  </PropertyGroup>
  <PropertyGroup>
    <!--
			Primary configuration properties (override them via command line if needed
		-->
    <BuildPath Condition="$(BuildPath)==''">$(MSBuildProjectDirectory)\Build</BuildPath>
    <Version Condition="$(Version)==''">0.0.0.0</Version>
    <Configuration Condition="$(Configuration)==''">Release</Configuration>
    <ArtifactDirectory Condition="$(ArtifactDirectory)==''">$(BuildPath)\Artifact</ArtifactDirectory>
    <PackageDirectory Condition="$(PackageDirectory)==''">$(BuildPath)\_Package\$(Version)</PackageDirectory>
    <DeploymentFolder Condition="$(DeploymentFolder)==''">$(BuildPath)\_DeploymentFolder\</DeploymentFolder>
    <InstallerFolder Condition="$(InstallerFolder)==''">$(BuildPath)\Installer</InstallerFolder>
    <XpandDesignExperiencePath>$(MSBuildProjectDirectory)\Xpand.DesignExperience</XpandDesignExperiencePath>
    <!--
			Derived configuration properties
		-->
    <ProjectName>Xpand</ProjectName>
    <TestPath>$(BuildPath)\Test</TestPath>
    <TempPath>$(BuildPath)\Temp</TempPath>
    <XpandDLLPath>$(MSBuildProjectDirectory)\Xpand.DLL</XpandDLLPath>
    <RecompiledDXSources>$(Configuration)</RecompiledDXSources>
    <!--    <RecompiledDXSources>RecompiledDXSources</RecompiledDXSources>-->
    <SkipDashboard Condition="'$(RecompiledDXSources)' == 'RecompiledDXSources'">true</SkipDashboard>
    <OutputFile>$(MSBuildProjectDirectory)\output.txt</OutputFile>
    <_third_party_assemblies>$(MSBuildProjectDirectory)\_third_party_assemblies</_third_party_assemblies>
    <SourceExclusions>**\.svn\**\*.*;**\_svn\**\*.*;**\*.user;**\*.suo;**\*.db;**\bin\**\*.*;**\obj\**\*.*;.hg\**\*.*;_hg\**\*.*;.git\**\*.*</SourceExclusions>
    <XpandDocsPath>$(MSBuildProjectDirectory)\Xpand.Docs\</XpandDocsPath>
    <DocsSiteName>documentation.expandframework.com</DocsSiteName>
    <XpandDocsSitePath>C:\inetpub\vhosts\$(DocsSiteName)</XpandDocsSitePath>
    <AllModulesSolution>.\Xpand\Xpand.ExpressApp.Modules\AllModules.sln</AllModulesSolution>

  </PropertyGroup>
  <Import Project="Resource\Build\MSBuild.Community.Tasks.targets" />
  <Import Project="Resource\Build\ExtensionPack\MSBuild.ExtensionPack.tasks" />
  <Import Project="Resource\TypeMock\TypeMock.MSBuild.Tasks" />
  <!--
	<Import Project="Resource\Build\NCoverExplorer.MSBuildTasks.targets"/>
	<Import Project="Resource\Build\Microsoft.StyleCop.Targets" />
	-->
  <!-- Main build entry file (extends development builds)-->

  <ItemGroup>
    <CoreProjectSolutions Include=".\Xpand\Helpers.sln;.\Xpand\Xpand.ExpressApp\Xpand.ExpressApp.sln;.\Xpand.EasyTest\Xpand.EasyTest.sln;"></CoreProjectSolutions>
    <AddInProjects Include=".\Xpand.Addins\XpandAddIns.csproj;.\Xpand.Addins\Xpand.ExpressApp.ModelEditor\Xpand.ExpressApp.ModelEditor.csproj"></AddInProjects>
    <DemoSolutions Include=".\Demos\AllDemos.sln;" Condition="$(RecompiledDXSources) == $(Configuration)"/>
    <DemoTesterSolutions Include=".\Demos\Modules\AllModuleTesters.sln;" Condition="$(RecompiledDXSources) == $(Configuration)"/>
  </ItemGroup>

  <ItemGroup>
    <Tokens Include="SourcePackage">
      <ReplacementValue>$(ProjectName)-Source-$(Version).zip</ReplacementValue>
    </Tokens>
    <Tokens Include="BinaryPackage">
      <ReplacementValue>$(ProjectName)-Lib-$(Version).zip</ReplacementValue>
    </Tokens>
    <Tokens Include="Version">
      <ReplacementValue>$(Version)</ReplacementValue>
    </Tokens>
  </ItemGroup>
  <UsingTask TaskName="MSBuild.ExtensionPack.FileSystem.File" AssemblyFile="Resource\build\ExtensionPack\MSBuild.ExtensionPack.dll" />
  <UsingTask TaskName="Mash2.MSBuild.Tasks.Twitter" AssemblyFile="Resource\build\Mash2\Mash2.MSBuild.Tasks.dll" />
  <Target Name="FixReferences" Condition="$(SkipFixReferences)!=true">
    <MSBuild Projects=".\FixReferences\FixReferences.csproj" Targets="Build" />
    <Exec Command=".\FixReferences\bin\debug\FixReferences.exe" />
    <Exec Command=".\FixReferences\bin\debug\FixReferences.exe" >
      <Output TaskParameter="Outputs" PropertyName="FixRefError" />
    </Exec>
    <Message Text="@(FixRefError)"/>
  </Target>
  <!-- 
	 Solution redirects. Every VS project normally knows how to support these targets
	-->

  <Target Name="Build" DependsOnTargets="FixReferences">
    <MSBuild Projects="@(CoreProjectSolutions)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="@(AddInProjects)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="$(AllModulesSolution)" Targets="Build" Properties="Configuration=$(RecompiledDXSources);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="$(XpandDocsPath)\Xpand.Docs.sln" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" Condition="$(RecompiledDXSources) == $(Configuration)" />
    <MSBuild Projects="@(DemoSolutions)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="@(DemoTesterSolutions)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />

  </Target>
  <Target Name="Clean">
    <MSBuild Projects="@(CoreProjectSolutions)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="@(AddInProjects)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="$(AllModulesSolution)" Targets="Clean" Properties="Configuration=$(RecompiledDXSources)" />
    <MSBuild Projects="$(XpandDocsPath)\Xpand.Docs.sln" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="@(DemoSolutions)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="@(DemoTesterSolutions)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <CreateItem Include="**/Debug/**/*.*;**/Release/**/*.*">
      <Output ItemName="_binaryFiles" TaskParameter="Include" />
    </CreateItem>
    <Delete Files="@(_binaryFiles)" TreatErrorsAsWarnings="true" />
    <RemoveDir Directories="$(BuildPath);$(XpandDLLPath)" />
  </Target>
  <Target Name="Copy" DependsOnTargets="Build">
    <MakeDir Directories="$(BuildPath);$(TempPath)" />
    <!--Library
		Resource\Library\*.*
		-->
    <CreateItem Include="$(XpandDLLPath)\*.*;" Exclude="$(XpandDLLPath)\*.locked;$(XpandDLLPath)\DevExpress*.*">
      <Output ItemName="files" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(files)" DestinationFolder="$(TempPath)" />
    <CreateItem Include="Xpand.Key\Xpand.snk;">
      <!--Exclude="$(XpandDLLPath)\*.locked" -->
      <Output ItemName="keyFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(keyFiles)" DestinationFolder="$(BuildPath)\Xpand.Key" />
    <!-- TODO: All Tests 
		<CreateItem Include="Xpand\Xpand.Tests\**\bin\$(Configuration)\*.*" Exclude="Xpand\Xpand.Tests\**\bin\$(Configuration)\*.xml;Xpand\Xpand.Tests\**\bin\$(Configuration)\*.pdb;">
			<Output ItemName="TestFiles" TaskParameter="Include"/>
		</CreateItem>
		<Copy SourceFiles="@(TestFiles)" DestinationFolder="$(TestPath)" />
		-->
  </Target>

  <Target Name="PublishXpandDocsSite" DependsOnTargets="RunEasyTestsForDocsSite;UpdateXpandDocsSiteFiles;DBUpdater"/>
  <Target Name="StartXpandDocsSite">
    <Exec Command="appcmd start site /site.name:$(DocsSiteName)" WorkingDirectory="$(windir)\system32\inetsrv"></Exec>
  </Target>
  <Target Name="KillXpandDocsSite">
    <MSBuild.ExtensionPack.Computer.Process TaskAction="Get" IncludeUserInfo="true">
      <Output ItemName="ProcessList" TaskParameter="Processes"/>
    </MSBuild.ExtensionPack.Computer.Process>
    <Message Text="%(ProcessList.Identity)  - %(ProcessList.User) - %(ProcessList.ProcessId)" Condition="'%(ProcessList.User)' == '$(DocsSiteName)'"/>
    <MSBuild.ExtensionPack.Computer.Process TaskAction="Terminate" ProcessId="%(ProcessList.ProcessId)" Condition="'%(ProcessList.User)' == '$(DocsSiteName)'"/>
    <Exec Command="appcmd stop site /site.name:$(DocsSiteName)" WorkingDirectory="$(windir)\system32\inetsrv"></Exec>
  </Target>
  <Target Name="UpdateXpandDocsSiteFiles">
    <MSBuild Projects="$(XpandDocsPath)\Xpand.Docs.sln" Targets="Build" Properties="Configuration=$(Configuration);DefineConstants=$(DefineConstants)" />
    <CallTarget Targets="KillXpandDocsSite" />
    <ItemGroup>
      <PackagedFiles Include="$(XpandDocsPath)\Xpand.Docs.Web\**\*.*;"
            Exclude="$(XpandDocsPath)\**\*.csproj;$(XpandDocsPath)\**\*.pdb;$(XpandDocsPath)\**\*.resx;$(XpandDocsPath)\**\*.log;$(XpandDocsPath)\**\*.bak;$(XpandDocsPath)\Xpand.Docs.Web\obj\**\*.*;$(XpandDocsPath)\Xpand.Docs.Web\Properties\*.*;$(XpandDocsPath)\Xpand.Docs.Web\**\*.cs;$(XpandDocsPath)\Xpand.Docs.Web\*.config"/>
    </ItemGroup>
    <Copy SourceFiles="@(PackagedFiles)" DestinationFiles="@(PackagedFiles->'$(XpandDocsSitePath)\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <CallTarget Targets="StartXpandDocsSite" />
  </Target>
  <Target Name="DBUpdater">
    <Copy SourceFiles="$(DBUpdaterPath)\$(DBUpdaterName)" DestinationFolder="$(XpandDocsSitePath)\bin"/>
    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Set" Variable="XpandRootPath" Value="$(XpandDLLPath)"/>
    <Exec Command="$(DBUpdaterName) -silent ..\web.config Xpand.docs.web.dll >$(OutputFile)" WorkingDirectory="$(XpandDocsSitePath)\bin" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>
    <ReadLinesFromFile  File="$(OutputFile)">
      <Output  TaskParameter="Lines" ItemName="ExitCodeLines"/>
    </ReadLinesFromFile>
    <Error Text="@(ExitCodeLines->'%(Identity)', '%0a%0d')" Condition="'$(ErrorCode)' == '1'" />
    <Message Text="@(ExitCodeLines->'%(Identity)', '%0a%0d')" Condition="'$(ErrorCode)' != '1'" />
    <Delete Files="$(OutputFile)"></Delete>
  </Target>
  <Target Name="RunEasyTestsForDocsSite" DependsOnTargets="ConfigEasyTestParamsForDocsSite">
    <CallTarget Targets="RunEasyTests"></CallTarget>
  </Target>
  <Target Name="ConfigEasyTestParamsForDocsSite">
    <PropertyGroup>
      <EasyTestFilter>Xpand.Docs\</EasyTestFilter>
    </PropertyGroup>
    <ItemGroup>
      <EasyTests Remove="@(EasyTests)"></EasyTests>
      <EasyTestLogs Remove="@(EasyTestLogs)"></EasyTestLogs>
      <EasyProjects Remove="@(EasyProjects)"></EasyProjects>

      <EasyTests Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\AutoTest.ets"/>
      <EasyTestLogs Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\TestsLog.xml"/>
      <EasyProjects Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)\Xpand.Docs.sln"></EasyProjects>
    </ItemGroup>
  </Target>
  <Target Name="Test" >
    <!--    <MSBuild Projects=".\Xpand.EasyTest\Xpand.EasyTest.sln" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />-->

    <TypeMockStart />
    <!--		<Exec ContinueOnError="false" Command="Resource\Machine.Specifications\mspec-clr4.exe Build\Temp\Xpand.Tests.dll"/>-->
    <TypeMockStop />
    <!--    <CallTarget Targets="RunEasyTests"></CallTarget>-->
  </Target>
  <PropertyGroup>
    <EasyTestFilter>Demos\</EasyTestFilter>
  </PropertyGroup>
  <ItemGroup>
    <EasyTests Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\AutoTest.ets"/>
    <EasyTestLogs Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\TestsLog.xml"/>
    <EasyProjects Include="@(DemoFiles)"/>
    <EasyProjects Include="@(DemoTesterFiles)"/>
    <EasyTestReqs Include="$(XpandDLLPath)\Xpand.ExpressApp.EasyTest.WinAdapter.dll;$(XpandDLLPath)\Xpand.ExpressApp.EasyTest.WebAdapter.dll;$(XpandDLLPath)\Xpand.EasyTest.dll;$(_third_party_assemblies)\Fasterflect.dll"/>
    <EasyTestReqs Include="$(_third_party_assemblies)\ProcessAsUser.exe;$(TestExecutorPath);$(_third_party_assemblies)\AxInterop.MSTSCLib.dll;$(_third_party_assemblies)\Interop.MSTSCLib.dll"/>
  </ItemGroup>
  <Target Name="PrintEasyTestLogs" >
    <MSBuild.ExtensionPack.Xml.XmlFile
      TaskAction="ReadElements" File="%(EasyTestLogs.FullPath)" Condition="'@(EasyTestLogs->Count())'!='0'"
      XPath="/Tests/Test[@Result='Warning' or @Result='Failed']" ReadChildrenToMetadata="true">
      <Output TaskParameter="Elements" ItemName="Test"/>
    </MSBuild.ExtensionPack.Xml.XmlFile>
    <Error Text="%0D%0AApplicationName: %(Test.ApplicationName)%0D%0AError: %(Test.Error)" Condition="'@(Test->Count())'!='0'"  ContinueOnError="ErrorAndContinue"></Error>
  </Target>
  <Target Name="RunEasyTests">
    <Delete Files="@EasyTestLogs"/>
    <MSBuild Projects="@(EasyProjects)" Targets="Build" Properties="Configuration=EasyTest" />
    <CreateItem Include="@(EasyTestReqs)" AdditionalMetadata="CopiedToDir=%(EasyTests.RelativeDir);" >
      <Output ItemName="EasyTestReqsToDelete" TaskParameter="Include"/>
    </CreateItem>

    <CreateItem Include="@(EasyTestReqs)" AdditionalMetadata="CopiedToDir=%(EasyTests.RelativeDir);" >
      <Output ItemName="EasyTestReqsToDelete" TaskParameter="Include"/>
    </CreateItem>
    <Copy SourceFiles="@(EasytestReqs)" DestinationFolder="%(EasyTests.RelativeDir)"/>
    <Message Text='WorkingDirectory="%(EasyTests.RelativeDir)"'/>
    <Exec ContinueOnError="true"
          WorkingDirectory="%(EasyTests.RelativeDir)"
          Command='ProcessAsUser.exe $(EasyTestUserName) $(EasyTestUserPassword) $(TestExecutorName) %(EasyTests.Filename).ets'/>
    <Delete Files="%(EasyTestReqsToDelete.CopiedToDir)%(EasyTestReqsToDelete.Filename)%(EasyTestReqsToDelete.Extension)"/>
    <CallTarget Targets='PrintEasyTestLogs' ></CallTarget>

  </Target>
  <Target Name="Config">
    <Message Text="This sub-solution does not need configuration" />
  </Target>
  <Target Name="Report" DependsOnTargets="Clean;Build;Copy">
    <MakeDir Directories="$(ArtifactDirectory)" />
    <CreateItem Include="$(XpandDLLPath)\Xpand.*.dll;">
      <Output ItemName="fxAssemblies" TaskParameter="Include" />
    </CreateItem>
    <!--
	Disabled for now
		<FxCop 
			TargetAssemblies="@(fxAssemblies)"
			ToolPath="Resource/Tool/FxCop" 
			ProjectFile="$(ProjectName).FxCop" 
			AnalysisReportFileName="$(ArtifactDirectory)/fxcop.html" 
			ApplyOutXsl="True"
			ContinueOnError="True"
			FailOnError="False"
			OutputXslFileName="Resource/Tool/FxCop/Xml/FxCopReport.xsl"
		/> 
		<FxCop 
			TargetAssemblies="@(fxAssemblies)"
			ToolPath="Resource/Tool/FxCop" 
			ProjectFile="$(ProjectName).FxCop" 
			AnalysisReportFileName="$(ArtifactDirectory)/fxcop-report.xml" 			
		/> 
		<Message Text="##teamcity[importData id='FxCop' file='$(ArtifactDirectory)/fxcop-report.xml']" />
	-->
  </Target>
  <Target Name="Integrate" DependsOnTargets="Clean;Test;Report;" />
  <!--For Continuous integration and automated releases-->
  <Target Name="Release" DependsOnTargets="Clean;_Version;Build;Report;" />
  <Target Name="Installer">
    <MakeDir Directories="$(InstallerFolder);" />
    <CreateItem Include="$(XpandDLLPath)\*.dll;$(XpandDLLPath)\*.exe;$(XpandDLLPath)\*.config;">
      <Output ItemName="files" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(files)" DestinationFolder="$(InstallerFolder)\Xpand.DLL" />
    <CreateItem Include="$(XpandDesignExperiencePath)\**\*.*">
      <Output ItemName="XpandDesignExperienceFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(XpandDesignExperienceFiles)" DestinationFolder="$(InstallerFolder)\Xpand.DesignExperience\%(XpandDesignExperienceFiles.SubFolder)%(XpandDesignExperienceFiles.RecursiveDir)" />
    <!-- Source.zip -->
    <CreateItem Include="**\*.*" Exclude="Resource\Tool\**\*.*;Build\**\*.*;Resource\Build\Profile.Local\*.*;$(SourceExclusions);**\**\DevExpress*.dll;Xpand.DLL\**\*.*;**\*.docstates;**\*teamcity*;">
      <Output ItemName="_SourceFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(_SourceFiles)" ZipFileName="$(InstallerFolder)\Source.zip" Flatten="false" />
    <Exec Command="Resource\Tool\NSIS\makensis.exe /DVERSION=$(Version) Xpand.nsi" />
    <CreateItem Include="setup.exe">
      <!--Exclude="$(XpandDLLPath)\*.locked" -->
      <Output ItemName="setupFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(setupFiles)" DestinationFiles="$(PackageDirectory)\eXpandFramework-$(Version).exe" />
    <Delete Files="@(setupFiles)" />
  </Target>
  <Target Name="DeployUpdate">
    <MakeDir Directories="$(DeploymentFolder);" />
    <CreateItem Include="$(PackageDirectory)\*.*;">
      <Output ItemName="deploymentFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(deploymentFiles)" DestinationFolder="$(DeploymentFolder)\%(deploymentFiles.SubFolder)%(deploymentFiles.RecursiveDir)" />
    <Time Format="yyyy-MM-dd HH:mm">
      <Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
    </Time>
    <!-- Hack because buildtime is dynamically
		  http://social.msdn.microsoft.com/Forums/en-US/msbuild/thread/2c910802-e8c9-4bf1-bdb1-ef7835011eeb
		-->
    <Time Format="yyyy-MM-dd HH:mm">
      <Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
    </Time>
    <CreateItem Include="BuildTime" AdditionalMetadata="ReplacementValue=$(BuildTime)">
      <Output TaskParameter="Include" ItemName="BuildTimeToken" />
    </CreateItem>
    <CreateItem Include="@(Tokens);@(BuildTimeToken);">
      <Output TaskParameter="Include" ItemName="AllTokens" />
    </CreateItem>
    <!--Index-->
    <Copy SourceFiles="Resource\Template\index.template" DestinationFolder="$(TempPath)" />
    <TemplateFile Template="$(TempPath)\index.template" OutputFile="index.out" Tokens="@(AllTokens)" />
    <Copy SourceFiles="$(TempPath)\index.out" DestinationFiles="$(DeploymentFolder)\index.htm" />
  </Target>
  <Target Name="Distrib">
    <MakeDir Directories="$(PackageDirectory);" />
    <!-- Source.zip -->
    <CreateItem Include="**\*.*" Exclude="Resource\Tool\**\*.*;Build\**\*.*;Resource\Build\Profile.Local\*.*;$(SourceExclusions);**\**\DevExpress*.dll;Xpand.DLL\**\*.*;**\*.docstates;**\*teamcity*;">
      <Output ItemName="_SourceFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(_SourceFiles)" ZipFileName="$(PackageDirectory)\$(ProjectName)-Source-$(Version).zip" Flatten="false" />
    <!-- Lib.zip -->
    <CreateItem Include="$(TempPath)\*.*;" Exclude="$(TempPath)\DevExpress*;$(TempPath)\EmailModule*">
      <Output ItemName="_libFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(_libFiles)" ZipFileName="$(PackageDirectory)\$(ProjectName)-Lib-$(Version).zip" Flatten="true" />
    <!--
		Condition="$(DeployUpdate)=='true'" 
		-->
    <CallTarget Targets="DeployUpdate" />
  </Target>
  <Target Name="Twitter">
    <Exec ContinueOnError="false" Command="$(TwitterTool) &quot;$(TwitterConsumerKey)&quot; &quot;$(TwitterConsumerSecret)&quot; &quot;$(TwitterAccessToken)&quot; &quot;$(TwitterAccessTokenSecret)&quot;  &quot;new@expandframework v$(Version): http://goo.gl/g9wRy @DevExpress_XAF #dotnet #opensource #software #LOB #business #application #framework&quot;"/>
  </Target>
  <Target Name="_Version">
    <FileUpdate Files="Xpand\Xpand.Utils\Properties\AssemblyInfo.cs" Regex="(\d+\.\d+\.\d+\.\d+)" ReplacementText="$(Version)" />
    <Time Format="yyyy-MM-dd HH:mm">
      <Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
    </Time>
  </Target>

  <ItemGroup>
    <NuspecFile Include="Resource\NuGet\*.nuspec" Exclude="Resource\NuGet\XtraDashboardWin.nuspec;Resource\NuGet\XtraDashboardWeb.nuspec" Condition="$(SkipDashboard)=='true'"/>
    <NuspecFile Include="Resource\NuGet\*.nuspec" Condition="$(SkipDashboard)!='true'"/>
  </ItemGroup>

  <Target Name="NuGetPackage" Inputs="@(NuspecFile)" Outputs="NotUsedOutput">
    <MakeDir Directories="$(BuildPath)\NuGet" />
    <Exec ContinueOnError="false" Command="$(NuGetTool) pack %(NuspecFile.Identity) -BasePath $(MSBuildProjectDirectory) -OutputDirectory $(BuildPath)\NuGet -Version $(Version)"/>
    <CreateItem Include="Build\NuGet\*.nupkg" >
      <Output TaskParameter="Include" ItemName="NuGetFile"/>
    </CreateItem>
  </Target>

  <Target Name="NuGet"  Inputs="@(NuGetFile)" Outputs="NotUsedOutput" DependsOnTargets="NuGetPackage">
    <Exec ContinueOnError="false" Command="$(NuGetTool) push %(NuGetFile.Identity) $(NuGetApiKey) " />
  </Target>
</Project>